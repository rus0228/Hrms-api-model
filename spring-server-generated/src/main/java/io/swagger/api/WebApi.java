/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AccumulatedTaxableIncome;
import io.swagger.model.ActualListData;
import io.swagger.model.AddEntryForm;
import io.swagger.model.AddStaffAgreement;
import io.swagger.model.AllEntryMetaData;
import io.swagger.model.AllGroupShiftData;
import io.swagger.model.AttendancePeriodSettingList;
import io.swagger.model.BasicSetting;
import io.swagger.model.BenefitData;
import io.swagger.model.CalendarList;
import io.swagger.model.CategoryList;
import io.swagger.model.CompanyBenefitSaveData;
import io.swagger.model.CompanyBenefitSaveResponse;
import io.swagger.model.CompanyList;
import io.swagger.model.CompanyPayslipResult;
import io.swagger.model.CompanyPosition;
import io.swagger.model.CompanySalaryFieldMetas;
import io.swagger.model.ContractInfo;
import io.swagger.model.CustomMetaDataListItem;
import io.swagger.model.DailyReportInfoList;
import io.swagger.model.EmployeeCertificate;
import io.swagger.model.EmployeeCertificateData;
import io.swagger.model.GroupList;
import io.swagger.model.JobList;
import io.swagger.model.Organization;
import io.swagger.model.OrganizationList;
import io.swagger.model.OvertimeForm;
import io.swagger.model.OvertimeMonthlySummary;
import io.swagger.model.PeriodReportInfoList;
import io.swagger.model.PositionGradeList;
import io.swagger.model.ResumeList;
import io.swagger.model.SavedCompanyBenefitData;
import io.swagger.model.SearchEducation;
import io.swagger.model.SearchEntryForm;
import io.swagger.model.SearchStaff;
import io.swagger.model.SearchWorkExperience;
import io.swagger.model.SelectorStaff;
import io.swagger.model.SerarcLeaveHasUseByCondition;
import io.swagger.model.ShiftList;
import io.swagger.model.SickBillPage;
import io.swagger.model.SignCondition;
import io.swagger.model.SignRecordData;
import io.swagger.model.StaffAgreement;
import io.swagger.model.StaffBenefit;
import io.swagger.model.StaffFlexMetaData;
import io.swagger.model.StaffMetaData;
import io.swagger.model.VacationData;
import io.swagger.model.VacationRule;
import io.swagger.model.WorkExperience;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-10-01T16:49:09.202Z[GMT]")
@Api(value = "web", description = "the web API")
public interface WebApi {

    @ApiOperation(value = "add an employee certificate", nickname = "addAnEmployeeCertificate", notes = "", authorizations = {
        @Authorization(value = "petstore_auth", scopes = { 
            @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
            @AuthorizationScope(scope = "read:pets", description = "read your pets")
            })    }, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 405, message = "invalid input") })
    @RequestMapping(value = "/web/certificate/saveCertificate.do",
        consumes = { "appliation/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addAnEmployeeCertificate(@ApiParam(value = ""  )  @Valid @RequestBody List<EmployeeCertificate> body
);


    @ApiOperation(value = "add entry form", nickname = "addEntryForm", notes = "", authorizations = {
        @Authorization(value = "petstore_auth", scopes = { 
            @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
            @AuthorizationScope(scope = "read:pets", description = "read your pets")
            })    }, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/web/gateway/roster/api/entryWaitForm/addEntryWaitForm",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addEntryForm(@ApiParam(value = ""  )  @Valid @RequestBody AddEntryForm body
);


    @ApiOperation(value = "add new staff agreement", nickname = "addNewStaffAgreement", notes = "", authorizations = {
        @Authorization(value = "petstore_auth", scopes = { 
            @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
            @AuthorizationScope(scope = "read:pets", description = "read your pets")
            })    }, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/web/gateway/roster/aggregate/v1/agreements",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addNewStaffAgreement(@ApiParam(value = "") @Valid @RequestParam(value = "companyId", required = false) String companyId
,@ApiParam(value = "") @Valid @RequestParam(value = "userId", required = false) String userId
,@ApiParam(value = ""  )  @Valid @RequestBody List<AddStaffAgreement> body
);


    @ApiOperation(value = "Add a work experience of staff", nickname = "addWorkExperience", notes = "", authorizations = {
        @Authorization(value = "petstore_auth", scopes = { 
            @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
            @AuthorizationScope(scope = "read:pets", description = "read your pets")
            })    }, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "invalid input") })
    @RequestMapping(value = "/web/gateway/roster/aggregate/v1/experiences",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addWorkExperience(@ApiParam(value = ""  )  @Valid @RequestBody List<WorkExperience> body
);


    @ApiOperation(value = "get company list", nickname = "companyList", notes = "", response = CompanyList.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CompanyList.class),
        @ApiResponse(code = 400, message = "invalid status value") })
    @RequestMapping(value = "/web/companySite/getCompanySiteList.do",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CompanyList> companyList();


    @ApiOperation(value = "get department tree data structure", nickname = "departmentTreeStructure", notes = "", response = Organization.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Organization.class),
        @ApiResponse(code = 400, message = "invalid status value") })
    @RequestMapping(value = "/web/gateway/organization/api/v1/organization/tree.do",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Organization> departmentTreeStructure(@ApiParam(value = "is virtual") @Valid @RequestParam(value = "noVirtual", required = false) Boolean noVirtual
,@ApiParam(value = "show children depth") @Valid @RequestParam(value = "showLevel", required = false) String showLevel
);


    @ApiOperation(value = "get accumulated taxable income", nickname = "getAccumulatedTaxableIncome", notes = "", response = AccumulatedTaxableIncome.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AccumulatedTaxableIncome.class) })
    @RequestMapping(value = "/web/gateway/cnb/aggregate/cumulTax/list",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<AccumulatedTaxableIncome> getAccumulatedTaxableIncome();


    @ApiOperation(value = "get all agreements set in unique company", nickname = "getAllAgreements", notes = "", response = StaffAgreement.class, responseContainer = "List", tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StaffAgreement.class, responseContainer = "List") })
    @RequestMapping(value = "/web/gateway/roster/aggregate/v1/agreement/search",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<StaffAgreement>> getAllAgreements(@ApiParam(value = "company id") @Valid @RequestParam(value = "companyId", required = false) String companyId
,@ApiParam(value = "user id") @Valid @RequestParam(value = "userId", required = false) String userId
);


    @ApiOperation(value = "get all entry meta data", nickname = "getAllEntryMetaData", notes = "", response = AllEntryMetaData.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AllEntryMetaData.class) })
    @RequestMapping(value = "/web/gateway/roster/api/entry/getAllEntryMetaData",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AllEntryMetaData> getAllEntryMetaData();


    @ApiOperation(value = "get attendance period setting", nickname = "getAttendancePeriodSetting", notes = "", response = AttendancePeriodSettingList.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AttendancePeriodSettingList.class) })
    @RequestMapping(value = "/web/gateway/attendance/api/attendance/period/setting/getAttendancePeriodSettingList",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AttendancePeriodSettingList> getAttendancePeriodSetting();


    @ApiOperation(value = "get calendar list", nickname = "getCalendarList", notes = "", response = CalendarList.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CalendarList.class) })
    @RequestMapping(value = "/web/gateway/attendance/api/schedule/calendar/getCalendarList.do",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CalendarList> getCalendarList();


    @ApiOperation(value = "get company benefit items", nickname = "getCompanyBenefitItems", notes = "", response = BenefitData.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = BenefitData.class) })
    @RequestMapping(value = "/web/gateway/insurance/api/companyBenefits/getCompanyGroups",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<BenefitData> getCompanyBenefitItems(@ApiParam(value = "") @Valid @RequestParam(value = "category", required = false) String category
,@ApiParam(value = "") @Valid @RequestParam(value = "divisionId", required = false) String divisionId
,@ApiParam(value = "") @Valid @RequestParam(value = "enabled", required = false) Boolean enabled
);


    @ApiOperation(value = "get company payslip", nickname = "getCompanyPayslip", notes = "", response = CompanyPayslipResult.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CompanyPayslipResult.class) })
    @RequestMapping(value = "/web/gateway/payroll/api/payslipResults/search",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CompanyPayslipResult> getCompanyPayslip(@ApiParam(value = "") @Valid @RequestParam(value = "projection", required = false) String projection
);


    @ApiOperation(value = "get company salary field metas", nickname = "getCompanySalaryFieldMetas", notes = "", response = CompanySalaryFieldMetas.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CompanySalaryFieldMetas.class) })
    @RequestMapping(value = "/web/gateway/payroll/api/companySalaryfieldMetas/list",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CompanySalaryFieldMetas> getCompanySalaryFieldMetas();


    @ApiOperation(value = "get contract info", nickname = "getContractInfo", notes = "", response = ContractInfo.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ContractInfo.class) })
    @RequestMapping(value = "/web/gateway/roster/aggregate/v1/contracts/search",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ContractInfo> getContractInfo();


    @ApiOperation(value = "get employee certificate list", nickname = "getEmployeeCertificateList", notes = "", response = EmployeeCertificateData.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = EmployeeCertificateData.class) })
    @RequestMapping(value = "/web/gateway/roster/api//certificate/getCertificateList",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<EmployeeCertificateData> getEmployeeCertificateList();


    @ApiOperation(value = "get group list", nickname = "getGroupList", notes = "", response = GroupList.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GroupList.class) })
    @RequestMapping(value = "/web/gateway/attendance/api/schedule/group/getGroupList.do",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<GroupList> getGroupList();


    @ApiOperation(value = "get job categories", nickname = "getJobCategories", notes = "", response = CategoryList.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CategoryList.class) })
    @RequestMapping(value = "/web/position/getJobCategoryList.do",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CategoryList> getJobCategories();


    @ApiOperation(value = "legal entity", nickname = "getLegalEntities", notes = "", authorizations = {
        @Authorization(value = "petstore_auth", scopes = { 
            @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
            @AuthorizationScope(scope = "read:pets", description = "read your pets")
            })    }, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "invalid input"),
        @ApiResponse(code = 500, message = "server error") })
    @RequestMapping(value = "/web/corporation/queryCorporationList.do",
        method = RequestMethod.POST)
    ResponseEntity<Void> getLegalEntities();


    @ApiOperation(value = "get metaData for staff info", nickname = "getMetaDataForStaffInfo", notes = "", response = StaffMetaData.class, authorizations = {
        @Authorization(value = "petstore_auth", scopes = { 
            @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
            @AuthorizationScope(scope = "read:pets", description = "read your pets")
            })    }, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StaffMetaData.class) })
    @RequestMapping(value = "/web/flexible/metaData/getFlexMetaData.do",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<StaffMetaData> getMetaDataForStaffInfo(@ApiParam(value = ""  )  @Valid @RequestBody CustomMetaDataListItem body
);


    @ApiOperation(value = "get meta data list for all", nickname = "getMetaDataListForAll", notes = "", response = CustomMetaDataListItem.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CustomMetaDataListItem.class) })
    @RequestMapping(value = "/web/flexible/metaData/list.do",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CustomMetaDataListItem> getMetaDataListForAll();


    @ApiOperation(value = "get position grade list", nickname = "getPostionGradeList", notes = "", response = PositionGradeList.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PositionGradeList.class) })
    @RequestMapping(value = "/web/position/getPositionGradeList.do",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PositionGradeList> getPostionGradeList();


    @ApiOperation(value = "get resume list", nickname = "getResumeList", notes = "", response = ResumeList.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResumeList.class) })
    @RequestMapping(value = "/web/screenResume/queryResumeList.do",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResumeList> getResumeList();


    @ApiOperation(value = "get shift list", nickname = "getShiftList", notes = "", response = ShiftList.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ShiftList.class) })
    @RequestMapping(value = "/web/gateway/attendance/api/schedule/shift/getShiftList",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ShiftList> getShiftList();


    @ApiOperation(value = "get sign condition", nickname = "getSignCondition", notes = "", response = SignCondition.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SignCondition.class) })
    @RequestMapping(value = "/web/gateway/attendance/api/schedule/signCondition/v1/search",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SignCondition> getSignCondition();


    @ApiOperation(value = "get staff benefit list in quit", nickname = "getStaffBenefitListInQuit", notes = "", response = StaffBenefit.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StaffBenefit.class) })
    @RequestMapping(value = "/web/gateway/cnb/aggregate/staffBenefits/list/quit",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<StaffBenefit> getStaffBenefitListInQuit();


    @ApiOperation(value = "get staff benefit list in service", nickname = "getStaffBenefitListInService", notes = "", response = StaffBenefit.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StaffBenefit.class) })
    @RequestMapping(value = "/web/gateway/cnb/aggregate/staffBenefits/list/inService",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<StaffBenefit> getStaffBenefitListInService();


    @ApiOperation(value = "get staff education experience", nickname = "getStaffEducationExperience", notes = "", response = SearchEducation.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SearchEducation.class) })
    @RequestMapping(value = "/web/gateway/roster/aggregate/v1/educations/search",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SearchEducation> getStaffEducationExperience();


    @ApiOperation(value = "get staff flex meta data", nickname = "getStaffFlexMetaData", notes = "", response = StaffFlexMetaData.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StaffFlexMetaData.class) })
    @RequestMapping(value = "/web/gateway/roster/api/common/getFlexMetaData",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StaffFlexMetaData> getStaffFlexMetaData();


    @ApiOperation(value = "get staff list", nickname = "getStaffList", notes = "", response = SearchStaff.class, responseContainer = "List", tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SearchStaff.class, responseContainer = "List") })
    @RequestMapping(value = "/web/gateway/roster/aggregate/v1/staffs/search",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<SearchStaff>> getStaffList();


    @ApiOperation(value = "get the job collection", nickname = "getTheJobCollection", notes = "", response = CompanyPosition.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CompanyPosition.class) })
    @RequestMapping(value = "/web/gateway/organization/aggregate/v1/companyPosition/search",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CompanyPosition> getTheJobCollection();


    @ApiOperation(value = "get job list of the company", nickname = "getTheJobList", notes = "", response = JobList.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = JobList.class) })
    @RequestMapping(value = "/web/position/getJobList.do",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<JobList> getTheJobList();


    @ApiOperation(value = "get organization list for org-chart", nickname = "listForOrgChart", notes = "", response = OrganizationList.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = OrganizationList.class) })
    @RequestMapping(value = "/web/gateway/organization/api/v1/organization/list.do",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<OrganizationList> listForOrgChart();


    @ApiOperation(value = "save the company benefit", nickname = "saveTheCompanyBenefit", notes = "", response = CompanyBenefitSaveResponse.class, authorizations = {
        @Authorization(value = "petstore_auth", scopes = { 
            @AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
            @AuthorizationScope(scope = "read:pets", description = "read your pets")
            })    }, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CompanyBenefitSaveResponse.class) })
    @RequestMapping(value = "/web/gateway/insurance/api/companyBenefits/save",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CompanyBenefitSaveResponse> saveTheCompanyBenefit(@ApiParam(value = ""  )  @Valid @RequestBody CompanyBenefitSaveData body
);


    @ApiOperation(value = "search entry form", nickname = "searchEntryForm", notes = "", response = SearchEntryForm.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SearchEntryForm.class) })
    @RequestMapping(value = "/web/gateway/roster/aggregate/v1/entryForms/search",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SearchEntryForm> searchEntryForm();


    @ApiOperation(value = "search referenced company benefit items", nickname = "searchReferencedCompanyBenefitItems", notes = "", response = SavedCompanyBenefitData.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SavedCompanyBenefitData.class) })
    @RequestMapping(value = "/web/gateway/insurance/api/companyBenefits/search",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SavedCompanyBenefitData> searchReferencedCompanyBenefitItems(@ApiParam(value = "") @Valid @RequestParam(value = "_category", required = false) String _category
,@ApiParam(value = "") @Valid @RequestParam(value = "pageNo", required = false) Integer pageNo
,@ApiParam(value = "") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize
,@ApiParam(value = "") @Valid @RequestParam(value = "projection", required = false) String projection
);


    @ApiOperation(value = "search staff work experience", nickname = "searchStaffWorkExperience", notes = "", response = SearchWorkExperience.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SearchWorkExperience.class) })
    @RequestMapping(value = "/web/gateway/roster/aggregate/v1/experiences/search",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SearchWorkExperience> searchStaffWorkExperience();


    @ApiOperation(value = "select staff in new agreement", nickname = "selectStaffInNewAgreement", notes = "", response = SelectorStaff.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SelectorStaff.class) })
    @RequestMapping(value = "/web/gateway/web/common/staffSelector/search.do",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SelectorStaff> selectStaffInNewAgreement();


    @ApiOperation(value = "set organization", nickname = "setOrganization", notes = "", response = BasicSetting.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = BasicSetting.class) })
    @RequestMapping(value = "/web/gateway/roster/api/staffRoster/getBasicSetting",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<BasicSetting> setOrganization();


    @ApiOperation(value = "vacation rules", nickname = "vacationRules", notes = "", response = VacationRule.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = VacationRule.class) })
    @RequestMapping(value = "/web/gateway/attendance/api/leaveSetting/vacation/rules",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VacationRule> vacationRules();


    @ApiOperation(value = "get actual list", nickname = "webGatewayAttendanceAggregateScheduleActualGetActualListPost", notes = "", response = ActualListData.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ActualListData.class) })
    @RequestMapping(value = "/web/gateway/attendance/aggregate/schedule/actual/getActualList",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ActualListData> webGatewayAttendanceAggregateScheduleActualGetActualListPost();


    @ApiOperation(value = "get day report info list", nickname = "webGatewayAttendanceApiAttendanceDailyGetDailyReportInfoListPost", notes = "", response = DailyReportInfoList.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DailyReportInfoList.class) })
    @RequestMapping(value = "/web/gateway/attendance/api/attendance/daily/getDailyReportInfoList",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<DailyReportInfoList> webGatewayAttendanceApiAttendanceDailyGetDailyReportInfoListPost();


    @ApiOperation(value = "get period report info list", nickname = "webGatewayAttendanceApiAttendancePeriodInstanceGetPeriodReportListPost", notes = "", response = PeriodReportInfoList.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PeriodReportInfoList.class) })
    @RequestMapping(value = "/web/gateway/attendance/api/attendance/period/instance/getPeriodReportList",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<PeriodReportInfoList> webGatewayAttendanceApiAttendancePeriodInstanceGetPeriodReportListPost();


    @ApiOperation(value = "get sign record list", nickname = "webGatewayAttendanceApiAttendanceSignRecordGetSignRecordListPost", notes = "", response = SignRecordData.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SignRecordData.class) })
    @RequestMapping(value = "/web/gateway/attendance/api/attendance/sign/record/getSignRecordList",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SignRecordData> webGatewayAttendanceApiAttendanceSignRecordGetSignRecordListPost();


    @ApiOperation(value = "add overtime reality", nickname = "webGatewayAttendanceApiOvertimeFormAddOvertimeFormPost", notes = "", tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/web/gateway/attendance/api/overtimeForm/addOvertimeForm",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> webGatewayAttendanceApiOvertimeFormAddOvertimeFormPost(@ApiParam(value = ""  )  @Valid @RequestBody OvertimeForm body
);


    @ApiOperation(value = "get overtime monthly", nickname = "webGatewayAttendanceApiOvertimeMonthlyAccountGetOvertimeMonthlySummaryPost", notes = "", response = OvertimeMonthlySummary.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = OvertimeMonthlySummary.class) })
    @RequestMapping(value = "/web/gateway/attendance/api/overtimeMonthlyAccount/getOvertimeMonthlySummary",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<OvertimeMonthlySummary> webGatewayAttendanceApiOvertimeMonthlyAccountGetOvertimeMonthlySummaryPost();


    @ApiOperation(value = "get all groupshift", nickname = "webGatewayAttendanceApiScheduleActualGetAllGroupShiftGet", notes = "", response = AllGroupShiftData.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AllGroupShiftData.class) })
    @RequestMapping(value = "/web/gateway/attendance/api/schedule/actual/getAllGroupShift",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AllGroupShiftData> webGatewayAttendanceApiScheduleActualGetAllGroupShiftGet();


    @ApiOperation(value = "search vacation realities", nickname = "webGatewayAttendanceApiWebApiVacationsV1SearchPost", notes = "", response = VacationData.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = VacationData.class) })
    @RequestMapping(value = "/web/gateway/attendance/api/web/api/vacations/v1/search",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<VacationData> webGatewayAttendanceApiWebApiVacationsV1SearchPost();


    @ApiOperation(value = "report left realities", nickname = "webLeaveHasUseSerarcLeaveHasUseByConditionDoPost", notes = "", response = SerarcLeaveHasUseByCondition.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SerarcLeaveHasUseByCondition.class) })
    @RequestMapping(value = "/web/leaveHasUse/serarcLeaveHasUseByCondition.do",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SerarcLeaveHasUseByCondition> webLeaveHasUseSerarcLeaveHasUseByConditionDoPost();


    @ApiOperation(value = "report sick realities", nickname = "webLeaveSickBillGetSickBillPageDoPost", notes = "", response = SickBillPage.class, tags={ "web", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SickBillPage.class) })
    @RequestMapping(value = "/web/leaveSickBill/getSickBillPage.do",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SickBillPage> webLeaveSickBillGetSickBillPageDoPost();

}

